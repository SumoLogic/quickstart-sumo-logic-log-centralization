AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: "Template to setup the common AWS and Sumo Logic resources for AWS Quick Start Solution."
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
      - Label:
          default: "Sumo Logic Access Configuration (Required)"
        Parameters:
          - SumoDeployment
          - SumoAccessID
          - SumoAccessKey
          - SumoOrganizationId
          - RemoveSumoResourcesOnDeleteStack
      - Label:
          default: "AWS Access Configuration (Required)"
        Parameters:
          - SecurityToolingAccountId
          - LoggingAccountId
          - OrganizationUnitID
          - OrganizationRootID
          - SecurityToolingAccountRegion
      - Label:
          default: "Role Details configuration"
        Parameters:
          - AdministrationRoleName
          - ExecutionRoleRuleName
      - Label:
          default: Delivery S3 Attributes
        Parameters:
          - DeliveryBucketPrefix 
      - Label:
          default: "Sumo Hosted Collector Name"
        Parameters:
          - CollectorName       
      - Label:
          default: "AWS Quick Start configuration"
        Parameters:
          - QSS3BucketName
          - QSS3BucketRegion
          - QSS3KeyPrefix

  ParameterLabels:
      LoggingAccountId:
        default: Security Log Archive Account ID
      SecurityToolingAccountId:
        default: Security Tooling Account ID    
      SecurityToolingAccountRegion:
        default: "Security tooling account Region"
      LogArchivingAccountRegion:
        default: "Log archiving account Region"  
      OrganizationRootID:
        default: "AWS Organization root ID"
      SumoDeployment:
        default: "Sumo Logic Deployment Name"
      SumoAccessID:
        default: "Sumo Logic Access ID"
      SumoAccessKey:
        default: "Sumo Logic Access Key"
      SumoOrganizationId:
        default: "Sumo Logic Organization Id"
      RemoveSumoResourcesOnDeleteStack:
        default: "Delete Sumo Logic Resources when stack is deleted"
      AdministrationRoleName:
        default: "Administration Role Name"
      ExecutionRoleRuleName:
        default: "Execution Role Name" 
      CollectorName:
        default: "Name of Sumo Hosted Collector"      
      QSS3BucketName:
        default: "Quick Start S3 bucket name"
      QSS3BucketRegion:
        default: "Quick Start S3 bucket region"
      QSS3KeyPrefix:
        default: "Quick Start S3 key prefix"

Parameters:
  SumoDeployment:
    Type: String
    AllowedValues:
      - au
      - ca
      - de
      - eu
      - jp
      - us2
      - us1
      - in
      - fed
    Description: "Enter au, ca, de, eu, jp, us2, in, fed or us1."
  SumoAccessID:
    Type: String
    Description: "The Sumo Logic Access ID. Used for Sumo Logic API calls."
    AllowedPattern: ".+"
    ConstraintDescription: "Sumo Logic Access ID can not be empty."
  SumoAccessKey:
    Type: String
    Description: "The Sumo Logic Access Key. Used for Sumo Logic API calls."
    AllowedPattern: ".+"
    ConstraintDescription: "Sumo Logic Access Key can not be empty."
    NoEcho: true
  SumoOrganizationId:
    Description: "The Account Overview page displays information about your Sumo Logic organization. Used for IAM Role in Sumo Logic AWS Sources."
    Type: String
    AllowedPattern: ".+"
    ConstraintDescription: "Sumo Logic Organization Id can not be empty."
  RemoveSumoResourcesOnDeleteStack:
    AllowedValues:
      - true
      - false
    Default: true
    Description: "To delete collectors, sources and apps when the stack is deleted, set this parameter to true. Default is true.
                  Deletes the resources created by the stack. Deletion of updated resources will be skipped."
    Type: String
  LoggingAccountId:
    Type: String
    Description: Organization log archive account ID
  SecurityToolingAccountId:
    Type: String
    Description: Organization tooling account ID  
  SecurityToolingAccountRegion:
    Description: "Enter your security tooling account region"
    Type: String
  LogArchivingAccountRegion:
    Description: "Enter your log archiving account region"
    Type: String
  CreateS3Bucket:
    Type: String
    Description: "Yes: Create AWS S3 Bucket for QuickStart logs.
                  No: Skip creation of the S3 Bucket."
    Default: 'No'
    AllowedValues:
      - 'Yes'
      - 'No'
  CloudTrailExistsS3BucketName:
    Type: String
    Description: "Required when flag is set to Yes. Provide an existing S3 Bucket name which contains CloudTrail Logs"
    Default: ""
  DeliveryBucketPrefix:
    AllowedPattern: "^$|^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$"
    ConstraintDescription:
      S3 bucket name can include numbers, lowercase letters, uppercase letters, and hyphens (-).
      It cannot start or end with a hyphen (-).
    Default: log-delivery
    Description: >
      Delivery S3 bucket prefix.
      The account and region will get added to the end. e.g. log-delivery-123456789012-us-east-1
    Type: String
  CollectorName:
    Type: String
    Description: "Name of Sumo Hosted Collector"
    Default: "aws-quickstart-collector"
  QSS3BucketName:
    AllowedPattern: "^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$"
    ConstraintDescription: "Quick Start bucket name can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-)."
    Default: "aws-quickstart"
    Description: "S3 bucket name for the Quick Start assets. This string can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-)."
    Type: "String"
  QSS3BucketRegion:
    Default: "us-east-1"
    Description: "The AWS Region where the Quick Start S3 bucket (QSS3BucketName) is hosted. When using your own bucket, you must specify this value."
    Type: String
  QSS3KeyPrefix:
    AllowedPattern: "^[0-9a-zA-Z-/]*$"
    ConstraintDescription: "Quick Start key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/)."
    Default: "quickstart-sumo-logic-log-centralization/"
    Description: "S3 key prefix for the Quick Start assets. Quick Start key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/)."
    Type: "String"
    
  OrganizationRootID:
    AllowedPattern: '^r-[0-9a-z]{4,32}$'
    Description: >
      The Root ID string requires r- followed by from 4 to 32 lowercase letters or digits.
    MaxLength: 34
    Type: String
    
  AdministrationRoleName:
    AllowedPattern: "^[0-9a-zA-Z-/]*$"
    Description: AWS Administration Role name to enable use of AWS CloudFormation StackSets.
    Default: "AWSCloudFormationStackSetAdministrationRole"
    Type: String

  ExecutionRoleRuleName:
    AllowedPattern: "^[0-9a-zA-Z-/]*$"
    Description: AWS Execution Role name of the administrator account (the account in which StackSets will be created).
    Type: String
    Default: AWSCloudFormationStackSetExecutionRole

  QSVersion:
    Type: String
    Description: "Version of Quick Start"
    Default: "1.0"

Conditions:
  create_s3_bucket: !Equals [ !Ref CreateS3Bucket, 'Yes' ]
Resources:
#Role for management account
  rAdministrationRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Ref AdministrationRoleName 
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: cloudformation.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: !Sub 'AssumeRole-${ExecutionRoleRuleName}'
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - sts:AssumeRole
                Resource:
                  - !Sub 'arn:*:iam::*:role/${ExecutionRoleRuleName}'
  rExecutionRole:
    DependsOn:
      - "rAdministrationRole"
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Ref ExecutionRoleRuleName
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS:
                - !Ref "AWS::AccountId"
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - !Sub arn:${AWS::Partition}:iam::aws:policy/AdministratorAccess

  rSumoLogicHelperRole:
    DependsOn:
      - "rExecutionRole"  
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'SumoLogicHelperRole-${AWS::StackName}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:

        - PolicyName: !Sub 'management-org-policy-logs-${AWS::StackName}'
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action: logs:CreateLogGroup
                Effect: Allow
                Resource: !Sub arn:*:logs:${AWS::Region}:${AWS::AccountId}:log-group:*
                Sid: CreateLogGroup
              - Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Effect: Allow
                Resource: !Sub arn:*:logs:${AWS::Region}:${AWS::AccountId}:log-group:*:log-stream:*
                Sid: CreateLogStreamAndEvents

        - PolicyName: !Sub 'management-org-policy-organizations-${AWS::StackName}'
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - organizations:DescribeOrganization
                  - organizations:ListAWSServiceAccessForOrganization
                  - organizations:ListAccounts
                  - organizations:ListDelegatedAdministrators
                Effect: Allow
                Resource: "*"
                Sid: OrganizationsReadAccess

              - Action:
                  - organizations:DeregisterDelegatedAdministrator
                  - organizations:DisableAWSServiceAccess
                  - organizations:EnableAWSServiceAccess
                  - organizations:RegisterDelegatedAdministrator
                Condition:
                  StringLikeIfExists:
                    organizations:ServicePrincipal: guardduty.amazonaws.com
                Effect: Allow
                Resource: "*"
                Sid: RegisterDeregisterDelegatedAdministrator

        - PolicyName: !Sub 'management-org-policy-guardduty-${AWS::StackName}'
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - guardduty:DisableOrganizationAdminAccount
                  - guardduty:EnableOrganizationAdminAccount
                  - guardduty:ListDetectors
                  - guardduty:ListOrganizationAdminAccounts
                Effect: Allow
                Resource: !Sub "arn:${AWS::Partition}:guardduty:*:*:*"
                Sid: GuardDutyNoResource

              - Action:
                  - guardduty:DeleteDetector
                  - guardduty:ListMembers
                Effect: Allow
                Resource:
                  - !Sub arn:*:guardduty:*:${AWS::AccountId}:detector/*
                  - !Sub arn:*:guardduty:*:${AWS::AccountId}:/detector/*
                Sid: GuardDutyWithResource
        - PolicyName: !Sub 'management-org-policy-iam-${AWS::StackName}'
          PolicyDocument:
            Version: 2012-10-17
            Statement:
            - Action: iam:GetRole
              Effect: Allow
              Resource: !Sub arn:*:iam::${AWS::AccountId}:role/*
              Sid: AllowReadIamActions

            - Action:
                - iam:CreateServiceLinkedRole
                - iam:DeleteServiceLinkedRole
              Effect: Allow
              Condition:
                StringLike:
                  iam:AWSServiceName: guardduty.amazonaws.com
              Resource: !Sub arn:*:iam::${AWS::AccountId}:role/aws-service-role/guardduty.amazonaws.com/AWSServiceRoleForAmazonGuardDuty
              Sid: AllowCreateDeleteServiceLinkedRole

            - Action:
                - iam:DeleteRolePolicy
                - iam:PutRolePolicy
              Effect: Allow
              Resource: !Sub arn:*:iam::${AWS::AccountId}:role/aws-service-role/guardduty.amazonaws.com/AWSServiceRoleForAmazonGuardDuty
              Sid: AllowPolicyActions

            - Action: sts:AssumeRole
              Effect: Allow
              Resource: 
                - !Sub arn:*:guardduty:*:${AWS::AccountId}:admin/*
                - !Sub arn:*:iam::*:role/*
              Sid: AssumeRole             
              
  rSumoLogicLambdaHelper:

    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: main.handler
      Runtime: python3.8
      CodeUri:
        Bucket: !Sub
                - "${S3Bucket}"
                - S3Bucket: !Sub '${QSS3BucketName}-${AWS::Region}'
        Key: !Sub "${QSS3KeyPrefix}apps/sumo-aws-apps/sumologic-app-utils/sumo_app_utils_org.zip"
      MemorySize: 512
      Timeout: 900
      ReservedConcurrentExecutions: 1
      Role:
        Fn::GetAtt:
          - rSumoLogicHelperRole
          - Arn

  OrgTrustAllStackset:
    DependsOn:
      - "rAdministrationRole"  
    Type: AWS::CloudFormation::StackSet
    Properties:
      Tags:
        - Key: "version"
          Value: !Ref QSVersion
      StackSetName: !Sub 'CommonOrgTrustAllAccount-${AWS::StackName}'
      AutoDeployment: 
        Enabled: true
        RetainStacksOnAccountRemoval: true
      Parameters: 
        - ParameterKey: ManagementAccountID
          ParameterValue: !Ref "AWS::AccountId"
        - ParameterKey: ExecutionRoleRuleName
          ParameterValue:  !Ref ExecutionRoleRuleName
      PermissionModel: SERVICE_MANAGED
      Capabilities:
        - 'CAPABILITY_NAMED_IAM'
        - 'CAPABILITY_IAM'
        - 'CAPABILITY_AUTO_EXPAND'
      StackInstancesGroup:
        - Regions:
            - !Ref AWS::Region
          DeploymentTargets:
              OrganizationalUnitIds: 
                - !Ref OrganizationRootID
      TemplateURL: !Sub
        - 'https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}apps/sumo-aws-apps/common-org/common-org-trust-all.template.yaml'
        - S3Region: !Ref 'AWS::Region'
          S3Bucket: !Sub '${QSS3BucketName}-${AWS::Region}'

  OrgDeliveryKmsKeyStackset:
    DependsOn:
      - "OrgTrustAllStackset"  
    Type: AWS::CloudFormation::StackSet
    Properties:
      Tags:
        - Key: "version"
          Value: !Ref QSVersion
      StackSetName: !Sub 'CommonOrgDeliveryKmsKey-${AWS::StackName}'
      AdministrationRoleARN: !GetAtt rAdministrationRole.Arn
      ExecutionRoleName: !Ref ExecutionRoleRuleName
      PermissionModel: SELF_MANAGED
      Capabilities:
        - 'CAPABILITY_NAMED_IAM'
        - 'CAPABILITY_IAM'
        - 'CAPABILITY_AUTO_EXPAND'
      StackInstancesGroup:
        - Regions:
            - !Ref SecurityToolingAccountRegion
          DeploymentTargets:
            Accounts:
              - !Ref SecurityToolingAccountId    
      TemplateURL: !Sub
        - 'https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}apps/sumo-aws-apps/common-org/common-org-delivery-kms-key.yaml'
        - S3Region: !Ref 'AWS::Region'
          S3Bucket: !Sub '${QSS3BucketName}-${AWS::Region}'
      Parameters:
        - ParameterKey: 'LoggingAccountId'
          ParameterValue: !Ref LoggingAccountId
        - ParameterKey: 'OrgPrimaryAccountId'
          ParameterValue: !Ref "AWS::AccountId" 
        - ParameterKey: 'DeliveryKeyAlias'
          ParameterValue: !Sub "KMS-${AWS::StackName}"

  OrgConfigurationRoleStackset:
    DependsOn:
      - "OrgDeliveryKmsKeyStackset"  
    Type: AWS::CloudFormation::StackSet
    Properties:
      Tags:
        - Key: "version"
          Value: !Ref QSVersion
      StackSetName: !Sub 'CommonOrgConfigurationRole-${AWS::StackName}'
      AdministrationRoleARN: !GetAtt rAdministrationRole.Arn
      ExecutionRoleName: !Ref ExecutionRoleRuleName
      PermissionModel: SELF_MANAGED
      Capabilities:
        - 'CAPABILITY_NAMED_IAM'
        - 'CAPABILITY_IAM'
        - 'CAPABILITY_AUTO_EXPAND'
      StackInstancesGroup:
        - Regions:
            - !Ref SecurityToolingAccountRegion
          DeploymentTargets:
            Accounts:
              - !Ref SecurityToolingAccountId    
      TemplateURL: !Sub
        - 'https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}apps/sumo-aws-apps/common-org/common-org-configuration-role.yaml'
        - S3Region: !Ref 'AWS::Region'
          S3Bucket: !Sub '${QSS3BucketName}-${AWS::Region}'
      Parameters:
        - ParameterKey: 'ConfigurationRoleName'
          ParameterValue: !Sub "ConfigurationRole-${AWS::StackName}"
        - ParameterKey: 'OrgPrimaryAccountId'
          ParameterValue: !Ref "AWS::AccountId" 
        - ParameterKey: 'OrgPrimaryLambdaRoleName'
          ParameterValue: !Sub 'SumoLogicHelperRole-${AWS::StackName}'

#Get ARN of Delivery KMS Key
  rOrgDeliveryKMSKeyArn:
    Type: Custom::AWSARN
    DependsOn:
      - "OrgDeliveryKmsKeyStackset"
    Properties:
      ServiceToken: !GetAtt rSumoLogicLambdaHelper.Arn
      accountID: !Ref SecurityToolingAccountId
      roleName: !Ref ExecutionRoleRuleName
      region: !Ref SecurityToolingAccountRegion
      stackName: !Sub 'CommonOrgDeliveryKmsKey-${AWS::StackName}'
      outputKey: oDeliveryKeyArn

  OrgDeliveryS3BucketStackset:
    Type: AWS::CloudFormation::StackSet
    Properties:
      Tags:
        - Key: "version"
          Value: !Ref QSVersion
      StackSetName: !Sub 'CommonOrgDeliveryS3Bucket-${AWS::StackName}'
      AdministrationRoleARN: !GetAtt rAdministrationRole.Arn
      ExecutionRoleName: !Ref ExecutionRoleRuleName
      PermissionModel: SELF_MANAGED
      Capabilities:
        - 'CAPABILITY_NAMED_IAM'
        - 'CAPABILITY_IAM'
        - 'CAPABILITY_AUTO_EXPAND'
      StackInstancesGroup:
        - Regions:
            - !Ref LogArchivingAccountRegion
          DeploymentTargets:
            Accounts:
              - !Ref LoggingAccountId
      TemplateURL: !Sub
        - 'https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}apps/sumo-aws-apps/common-org/common-org-delivery-s3-bucket.yaml'
        - S3Region:  !Ref 'AWS::Region'
          S3Bucket: !Sub '${QSS3BucketName}-${AWS::Region}'
      Parameters:
        - ParameterKey: 'DeliveryKMSKeyArn'
          ParameterValue: !GetAtt rOrgDeliveryKMSKeyArn.ARN
        - ParameterKey: 'DeliveryBucketPrefix'
          ParameterValue: !Ref DeliveryBucketPrefix
        - ParameterKey: "SumoDeployment"
          ParameterValue: !Ref SumoDeployment
        - ParameterKey: "SumoOrganizationId"
          ParameterValue: !Ref SumoOrganizationId
        - ParameterKey: "ManagementAccountID"
          ParameterValue: !Ref "AWS::AccountId"
        - ParameterKey: CreateS3Bucket
          ParameterValue: !Ref CreateS3Bucket
        - ParameterKey: CloudTrailExistsS3BucketName
          ParameterValue: !Ref CloudTrailExistsS3BucketName
        - ParameterKey: "QSS3BucketName"
          ParameterValue: !Ref QSS3BucketName
        - ParameterKey: QSS3KeyPrefix
          ParameterValue: !Ref QSS3KeyPrefix


  #Get ARN of GuardDuty S3 bucket
  rDeliveryS3BucketArn:
    Condition: create_s3_bucket
    Type: Custom::AWSARN
    DependsOn:
      - "OrgDeliveryS3BucketStackset"
    Properties:
      ServiceToken: !GetAtt rSumoLogicLambdaHelper.Arn
      accountID: !Ref LoggingAccountId
      roleName: !Ref ExecutionRoleRuleName
      region: !Ref LogArchivingAccountRegion
      stackName:  !Sub 'CommonOrgDeliveryS3Bucket-${AWS::StackName}'
      outputKey: oDeliveryS3Bucket

  #Get ARN of SNS Topic which created with s3 bucket
  rSNSTopicArn:
    Type: Custom::AWSARN
    DependsOn:
      - "OrgDeliveryS3BucketStackset"
    Properties:
      ServiceToken: !GetAtt rSumoLogicLambdaHelper.Arn
      accountID: !Ref LoggingAccountId
      roleName: !Ref ExecutionRoleRuleName
      region: !Ref LogArchivingAccountRegion
      stackName:  !Sub 'CommonOrgDeliveryS3Bucket-${AWS::StackName}'
      outputKey: oSNSTopicArn

  #Get ARN of Sumo Role which created with s3 bucket
  rSumoRoleArn:
    Type: Custom::AWSARN
    DependsOn:
      - "OrgDeliveryS3BucketStackset"
    Properties:
      ServiceToken: !GetAtt rSumoLogicLambdaHelper.Arn
      accountID: !Ref LoggingAccountId
      roleName: !Ref ExecutionRoleRuleName
      region: !Ref LogArchivingAccountRegion
      stackName:  !Sub 'CommonOrgDeliveryS3Bucket-${AWS::StackName}'
      outputKey: oSumoRoleArn

  # Create sumo hosted collector
  SumoHostedCollector:
    Type: Custom::Collector
    Properties:
      ServiceToken: !GetAtt rSumoLogicLambdaHelper.Arn
      Region: !Ref LogArchivingAccountRegion
      CollectorType: Hosted
      RemoveOnDeleteStack: !Ref RemoveSumoResourcesOnDeleteStack
      CollectorName: !Ref CollectorName
      SumoAccessID: !Ref SumoAccessID
      SumoAccessKey: !Ref SumoAccessKey
      SumoDeployment: !Ref SumoDeployment

Outputs:
  StackName:
    Description: Name of Common Stack
    Value: !Ref 'AWS::StackName'

  AdministrationRoleArn:
    Description: ARN of the create Administration Role.
    Value: !GetAtt rAdministrationRole.Arn
    Export: 
      Name: !Sub "${AWS::StackName}-AdminRoleOrg"
  
  ExecutionRoleRuleName:
    Description: Name of role execution
    Value: !Ref ExecutionRoleRuleName

  ExecutionRoleArn:
    Description: ARN of the create Execution Role.
    Value: !GetAtt rExecutionRole.Arn

  SumoLogicLambdaHelperARN:
    Description: "Sumo Logic Lambda Helper ARN"
    Value: !GetAtt rSumoLogicLambdaHelper.Arn
    Export:
      Name: !Sub "${AWS::StackName}-SumoLogicHelperFunctionARN"

  SumoLogicHelperRoleARN:
    Description: "Sumo Logic Helper Role ARN"
    Value: !GetAtt rSumoLogicHelperRole.Arn
    Export:
      Name: !Sub "${AWS::StackName}-SumoLogicHelperRoleARN"

  OrgDeliveryKMSKeyArn:
    Description: ARN of the delivery KMS key.
    Value: !GetAtt rOrgDeliveryKMSKeyArn.ARN

  SNSTopicArn:
    Description: ARN of SNS Topic
    Value: !GetAtt rSNSTopicArn.ARN

  
  OrgDeliveryS3BucketArn:
    Description: ARN of the delivery S3 bucket.
    Value: 
      !If
        - create_s3_bucket
        - !GetAtt rDeliveryS3BucketArn.ARN
        - !Ref CloudTrailExistsS3BucketName

  OrgPrimaryLambdaRoleName:
    Description: Organization Primary Lambda Role Name
    Value: !Sub 'SumoLogicHelperRole-${AWS::StackName}'

  OrgConfigurationRoleName:
    Description: Configuration Role Name
    Value: !Sub 'ConfigurationRole-${AWS::StackName}'

  SumoRoleArn:
    Description: "Arn of Sumo Role for sumologic account to read data from s3 bucket of customer"
    Value: !GetAtt rSumoRoleArn.ARN

  SumoCollectorID:
    Description: "ID of Sumo Hosted Collector"
    Value: !GetAtt SumoHostedCollector.COLLECTOR_ID


